{"version":3,"sources":["services/index.tsx","components/LocationSearch/index.tsx","components/DatePicker/index.tsx","components/Graph/graphConfiguration.ts","components/Graph/urls.ts","components/Graph/index.tsx","pages/Dashboard/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["makeApiUrl","endUri","apiEndPoints","pollutionData","getLocations","params","axios","get","getPollutionData","LocationSearch","props","onDateChange","onLocationChange","useState","ready","loading","error","setApiProgress","locationData","setLocationData","useAutocomplete","options","onChange","getOptionLabel","option","getRootProps","getInputProps","getListboxProps","getOptionProps","groupedOptions","useEffect","fetchData","then","a","limit","page","offset","sort","order_by","country","location","data","results","postProcessData","map","city","Box","className","placeholder","length","color","index","DatePicker","type","max","Date","toISOString","split","data-date-inline-picker","graphConfiguration","series","chart","height","fontfamilty","toolbar","show","zoom","autoScaleYaxis","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","xaxis","tickAmount","stroke","width","yaxis","fill","opacity","prepareStartAndEndDates","startDate","moment","format","endDate","prepareGraphSeries","rawData","activeGraph","Array","isArray","axis","xAxis","push","name","item","parameterExist","some","parameter","date","utc","findIndex","x","y","value","paperStyleProps","maxWidth","margin","marginTop","p","pt","pl","borderRadius","graphWrapperPaper","pb","Graph","graphData","setGraphData","setActiveGraph","originalData","setOriginalData","progress","setProgress","date_from","date_to","radius","entity","sensorType","JSON","parse","stringify","setTimeout","Collapse","in","Boolean","Paper","style","boxShadow","sx","elevation","Tabs","aria-label","_","e","Tab","label","CircularProgress","size","Dashboard","setDate","setLocation","Typography","variant","gutterBottom","mb","fontWeight","target","MainRoutes","path","element","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63dbcafa.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {IEndPointGetLocations, IEndPointGetPollutionData} from \"../interfaces\";\r\n\r\nconst BAST_URL = 'https://docs.openaq.org'\r\nconst API_VERSION = 'v2'\r\n\r\n\r\nfunction makeApiUrl(endUri: string) {\r\n    return `${BAST_URL}/${API_VERSION}/${endUri}`\r\n}\r\n\r\n\r\nconst apiEndPoints = {\r\n    pollutionData() {\r\n        return {\r\n            getLocations: (params: IEndPointGetLocations) => axios.get(makeApiUrl('cities'), {params}),\r\n            getPollutionData: (params: IEndPointGetPollutionData) => axios.get(makeApiUrl('measurements'), {params}),\r\n        }\r\n    }\r\n}\r\n\r\nexport default apiEndPoints","import {useEffect, useState} from 'react'\r\nimport {Box, useAutocomplete} from \"@mui/material\";\r\nimport RoomIcon from '@mui/icons-material/Room';\r\nimport {DatePicker} from '../'\r\nimport apiEndPoints from '../../services'\r\nimport './index.scss'\r\nimport {IEndPointGetLocations, ILocationSearch} from \"../../interfaces\";\r\n\r\n\r\nexport default function LocationSearch(props: ILocationSearch) {\r\n    const {onDateChange, onLocationChange} = {...props}\r\n    const [apiProgress, setApiProgress] = useState({ready: false, loading: true, error: false})\r\n    const [locationData, setLocationData] = useState<any[]>([]);\r\n\r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        getListboxProps,\r\n        getOptionProps,\r\n        groupedOptions,\r\n    } = useAutocomplete({\r\n        options: locationData,\r\n        onChange: onLocationChange,\r\n        getOptionLabel: (option) => option,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchData().then()\r\n    }, [])\r\n\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            setApiProgress({ready: false, loading: true, error: false})\r\n            const params: IEndPointGetLocations = {\r\n                limit: 300,\r\n                page: 1,\r\n                offset: 0,\r\n                sort: 'asc',\r\n                order_by: 'city',\r\n                country: 'IN'\r\n            }\r\n            const {data: {results: location}} = await apiEndPoints.pollutionData().getLocations(params)\r\n            setLocationData(postProcessData(location))\r\n            setApiProgress({ready: true, loading: false, error: false})\r\n        } catch (e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const postProcessData = function (location: any[]) {\r\n        return location.map(({city}: { city: string }) => city)\r\n    }\r\n\r\n    return (\r\n        <Box className={'location-search'}>\r\n            <div {...getRootProps()} className={'search-wrapper'}>\r\n                <input {...getInputProps()} placeholder={'Search location from India'}\r\n                       className={groupedOptions.length > 0 ? 'input-selected input' : 'input'}/>\r\n                <RoomIcon color={'action'} className={'search-icon'}/>\r\n                <div className={'date-picker-wrapper'}>\r\n                    <DatePicker onDateChange={onDateChange}/>\r\n                </div>\r\n            </div>\r\n            {groupedOptions.length > 0 ? (\r\n                <ul {...getListboxProps()}>\r\n                    {groupedOptions.map((option: any, index: number) => (\r\n                        <li {...getOptionProps({option, index})}>\r\n                            <RoomIcon color={'action'}/>\r\n                            {option}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : null}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n    {title: 'The Shawshank Redemption', year: 1994},\r\n    {title: 'The Godfather', year: 1972},\r\n    {title: 'The Godfather: Part II', year: 1974},\r\n    {title: 'The Dark Knight', year: 2008},\r\n    {title: '12 Angry Men', year: 1957},\r\n    {title: \"Schindler's List\", year: 1993},\r\n    {title: 'Pulp Fiction', year: 1994},\r\n    {\r\n        title: 'The Lord of the Rings: The Return of the King',\r\n        year: 2003,\r\n    },\r\n    {title: 'The Good, the Bad and the Ugly', year: 1966},\r\n    {title: 'Fight Club', year: 1999},\r\n    {\r\n        title: 'The Lord of the Rings: The Fellowship of the Ring',\r\n        year: 2001,\r\n    },\r\n    {\r\n        title: 'Star Wars: Episode V - The Empire Strikes Back',\r\n        year: 1980,\r\n    },\r\n    {title: 'Forrest Gump', year: 1994},\r\n    {title: 'Inception', year: 2010},\r\n    {\r\n        title: 'The Lord of the Rings: The Two Towers',\r\n        year: 2002,\r\n    },\r\n    {title: \"One Flew Over the Cuckoo's Nest\", year: 1975},\r\n    {title: 'Goodfellas', year: 1990},\r\n    {title: 'The Matrix', year: 1999},\r\n    {title: 'Seven Samurai', year: 1954},\r\n    {\r\n        title: 'Star Wars: Episode IV - A New Hope',\r\n        year: 1977,\r\n    },\r\n    {title: 'City of God', year: 2002},\r\n    {title: 'Se7en', year: 1995},\r\n    {title: 'The Silence of the Lambs', year: 1991},\r\n    {title: \"It's a Wonderful Life\", year: 1946},\r\n    {title: 'Life Is Beautiful', year: 1997},\r\n    {title: 'The Usual Suspects', year: 1995},\r\n    {title: 'Léon: The Professional', year: 1994},\r\n    {title: 'Spirited Away', year: 2001},\r\n    {title: 'Saving Private Ryan', year: 1998},\r\n    {title: 'Once Upon a Time in the West', year: 1968},\r\n    {title: 'American History X', year: 1998},\r\n    {title: 'Interstellar', year: 2014},\r\n    {title: 'Casablanca', year: 1942},\r\n    {title: 'City Lights', year: 1931},\r\n    {title: 'Psycho', year: 1960},\r\n    {title: 'The Green Mile', year: 1999},\r\n    {title: 'The Intouchables', year: 2011},\r\n    {title: 'Modern Times', year: 1936},\r\n    {title: 'Raiders of the Lost Ark', year: 1981},\r\n    {title: 'Rear Window', year: 1954},\r\n    {title: 'The Pianist', year: 2002},\r\n    {title: 'The Departed', year: 2006},\r\n    {title: 'Terminator 2: Judgment Day', year: 1991},\r\n    {title: 'Back to the Future', year: 1985},\r\n    {title: 'Whiplash', year: 2014},\r\n    {title: 'Gladiator', year: 2000},\r\n    {title: 'Memento', year: 2000},\r\n    {title: 'The Prestige', year: 2006},\r\n    {title: 'The Lion King', year: 1994},\r\n    {title: 'Apocalypse Now', year: 1979},\r\n    {title: 'Alien', year: 1979},\r\n    {title: 'Sunset Boulevard', year: 1950},\r\n    {\r\n        title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n        year: 1964,\r\n    },\r\n    {title: 'The Great Dictator', year: 1940},\r\n    {title: 'Cinema Paradiso', year: 1988},\r\n    {title: 'The Lives of Others', year: 2006},\r\n    {title: 'Grave of the Fireflies', year: 1988},\r\n    {title: 'Paths of Glory', year: 1957},\r\n    {title: 'Django Unchained', year: 2012},\r\n    {title: 'The Shining', year: 1980},\r\n    {title: 'WALL·E', year: 2008},\r\n    {title: 'American Beauty', year: 1999},\r\n    {title: 'The Dark Knight Rises', year: 2012},\r\n    {title: 'Princess Mononoke', year: 1997},\r\n    {title: 'Aliens', year: 1986},\r\n    {title: 'Oldboy', year: 2003},\r\n    {title: 'Once Upon a Time in America', year: 1984},\r\n    {title: 'Witness for the Prosecution', year: 1957},\r\n    {title: 'Das Boot', year: 1981},\r\n    {title: 'Citizen Kane', year: 1941},\r\n    {title: 'North by Northwest', year: 1959},\r\n    {title: 'Vertigo', year: 1958},\r\n    {\r\n        title: 'Star Wars: Episode VI - Return of the Jedi',\r\n        year: 1983,\r\n    },\r\n    {title: 'Reservoir Dogs', year: 1992},\r\n    {title: 'Braveheart', year: 1995},\r\n    {title: 'M', year: 1931},\r\n    {title: 'Requiem for a Dream', year: 2000},\r\n    {title: 'Amélie', year: 2001},\r\n    {title: 'A Clockwork Orange', year: 1971},\r\n    {title: 'Like Stars on Earth', year: 2007},\r\n    {title: 'Taxi Driver', year: 1976},\r\n    {title: 'Lawrence of Arabia', year: 1962},\r\n    {title: 'Double Indemnity', year: 1944},\r\n    {\r\n        title: 'Eternal Sunshine of the Spotless Mind',\r\n        year: 2004,\r\n    },\r\n    {title: 'Amadeus', year: 1984},\r\n    {title: 'To Kill a Mockingbird', year: 1962},\r\n    {title: 'Toy Story 3', year: 2010},\r\n    {title: 'Logan', year: 2017},\r\n    {title: 'Full Metal Jacket', year: 1987},\r\n    {title: 'Dangal', year: 2016},\r\n    {title: 'The Sting', year: 1973},\r\n    {title: '2001: A Space Odyssey', year: 1968},\r\n    {title: \"Singin' in the Rain\", year: 1952},\r\n    {title: 'Toy Story', year: 1995},\r\n    {title: 'Bicycle Thieves', year: 1948},\r\n    {title: 'The Kid', year: 1921},\r\n    {title: 'Inglourious Basterds', year: 2009},\r\n    {title: 'Snatch', year: 2000},\r\n    {title: '3 Idiots', year: 2009},\r\n    {title: 'Monty Python and the Holy Grail', year: 1975},\r\n];","import IDatePicker from \"../../interfaces/IDatePicker\";\r\nimport './index.scss'\r\n\r\nexport default function DatePicker(props: IDatePicker) {\r\n    const {onDateChange} = {...props}\r\n    return <input type={'date'}\r\n                  max={new Date().toISOString().split(\"T\")[0]}\r\n                  className={'date-picker-input'}\r\n                  data-date-inline-picker=\"true\" onChange={onDateChange}/>\r\n}","export const graphConfiguration: any = {\r\n    series: [],\r\n    options: {\r\n        chart: {\r\n            height: 350,\r\n            fontfamilty: \"Roboto\",\r\n            toolbar: {\r\n                show: false\r\n            },\r\n            zoom: {\r\n                autoScaleYaxis: true\r\n            }\r\n        },\r\n        plotOptions: {\r\n            bar: {\r\n                horizontal: false,\r\n                columnWidth: '55%',\r\n                endingShape: 'rounded'\r\n            },\r\n        },\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        xaxis: {\r\n            type: 'time',\r\n            tickAmount: 20,\r\n        },\r\n        stroke: {\r\n            show: true,\r\n            width: 2,\r\n        },\r\n        /*xaxis: {\r\n            categories: [],\r\n        },*/\r\n        yaxis: {\r\n            /*title: {\r\n                text: '$ (thousands)'\r\n            }*/\r\n        },\r\n        fill: {\r\n            opacity: 1\r\n        },\r\n    },\r\n};","import moment from 'moment';\r\n\r\nexport function prepareStartAndEndDates(startDate: string) {\r\n    if (!startDate) return null\r\n    const startDateFormatted = moment(startDate, 'YYYY-MM-DD').format('YYYY-MM-DDT00:00:00+00:00')\r\n    const endDateFormatted = moment(startDate, 'YYYY-MM-DD').format('YYYY-MM-DDT23:59:00+00:00')\r\n    return ({startDate: startDateFormatted, endDate: endDateFormatted})\r\n}\r\n\r\nexport function prepareGraphSeries(rawData: any[], activeGraph: string) {\r\n    if (!Array.isArray(rawData) || rawData.length < 1) return ({\r\n        axis: [],\r\n        data: []\r\n    })\r\n\r\n    const series: any[] = []\r\n    const xAxis: any[] = []\r\n    if (activeGraph !== 'All') series.push({name: activeGraph, data: []})\r\n\r\n    for (const item of rawData) {\r\n        const parameterExist = series.some(({name}: { name: string }) => name === item.parameter)\r\n        const axisExist = xAxis.some((axis: any) => axis === moment(item.date.utc).format('HH:mm'))\r\n        if (!axisExist) xAxis.push(moment(item.date.utc).format('HH:mm'))\r\n        if (activeGraph === 'All') {\r\n            if (!parameterExist) {\r\n                series.push({\r\n                    name: item.parameter,\r\n                    data: [{x: moment(item.date.utc).format('HH:mm'), y: item.value}]\r\n                })\r\n            } else {\r\n                const index = series.findIndex(({name}: { name: string }) => name === item.parameter)\r\n                series[index]['data'].push({x: moment(item.date.utc).format('h:mm'), y: item.value})\r\n            }\r\n        } else {\r\n            if (item.parameter === activeGraph) {\r\n                series[0]['data'].push({x: moment(item.date.utc).format('HH:mm'), y: item.value})\r\n            }\r\n        }\r\n    }\r\n    return ({\r\n        axis: xAxis,\r\n        data: series\r\n    })\r\n}","import {useEffect, useState} from \"react\";\r\nimport {Box, CircularProgress, Collapse, Paper, Tab, Tabs} from \"@mui/material\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport {graphConfiguration} from './graphConfiguration'\r\nimport {IEndPointGetPollutionData, IGraph} from \"../../interfaces\";\r\nimport apiEndPoints from \"../../services\";\r\nimport {prepareGraphSeries, prepareStartAndEndDates} from \"./urls\";\r\n\r\nconst paperStyleProps = {\r\n    width: '100%',\r\n    maxWidth: 1200,\r\n    margin: 'auto',\r\n    marginTop: 8,\r\n    p: 2,\r\n    pt: 1,\r\n    pl: 0,\r\n    borderRadius: 2\r\n}\r\nconst graphWrapperPaper = {\r\n    p: 2,\r\n    pt: 2,\r\n    pl: 3,\r\n    pb: 1\r\n}\r\n\r\nexport default function Graph(props: IGraph) {\r\n    const {location, date} = {...props}\r\n    const [graphData, setGraphData] = useState<any>(null)\r\n    const [activeGraph, setActiveGraph] = useState(0)\r\n    const [originalData, setOriginalData] = useState([])\r\n    const [progress, setProgress] = useState({loading: true, ready: false, error: false})\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            setProgress({loading: true, ready: false, error: false})\r\n            const {startDate, endDate} = prepareStartAndEndDates(date) || {startDate: null, endDate: null}\r\n            const params: IEndPointGetPollutionData = {\r\n                city: location,\r\n                date_from: startDate,\r\n                date_to: endDate,\r\n                offset: 0,\r\n                order_by: 'datetime',\r\n                page: 1,\r\n                radius: 1000,\r\n                sort: 'desc',\r\n                entity: 'government',\r\n                limit: 100000,\r\n                sensorType: 'reference grade'\r\n            }\r\n            const {data: {results}} = await apiEndPoints.pollutionData().getPollutionData(params)\r\n            setOriginalData(JSON.parse(JSON.stringify(results)))\r\n            const {data} = prepareGraphSeries(results, pollutionData[activeGraph]) || {axis: null, data: null}\r\n            graphConfiguration.series = data || []\r\n            setGraphData(graphConfiguration)\r\n            setProgress({loading: false, ready: true, error: false})\r\n        } catch (e) {\r\n            setProgress({loading: true, ready: false, error: true})\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (location && date) {\r\n            fetchData().then()\r\n        }\r\n    }, [location, date])\r\n\r\n    useEffect(() => {\r\n        setProgress({loading: true, ready: false, error: false})\r\n        setGraphData(null)\r\n        const {data} = prepareGraphSeries(originalData, pollutionData[activeGraph]) || {axis: null, data: null}\r\n        graphConfiguration.series = data || []\r\n        setGraphData(graphConfiguration)\r\n        setTimeout(() => {\r\n            setProgress({loading: false, ready: true, error: false})\r\n        }, 2000)\r\n    }, [activeGraph])\r\n\r\n    return (\r\n        <Box width={'100%'}>\r\n            <Collapse in={Boolean(location && date)}>\r\n                <Paper\r\n                    style={{boxShadow: 'var(--pd-shadow-1)'}}\r\n                    sx={paperStyleProps}\r\n                    elevation={0}>\r\n                    <Tabs aria-label=\"basic tabs example\" value={activeGraph}\r\n                          onChange={(_, e: any) => setActiveGraph(e)}>\r\n                        {\r\n                            pollutionData.map((parameter, index) => <Tab label={parameter} key={index}/>)\r\n                        }\r\n                    </Tabs>\r\n                    <Paper sx={graphWrapperPaper} elevation={0}>\r\n                        {progress.loading && <CircularProgress size={24}/>}\r\n                        {progress.ready && <ReactApexChart options={graphData.options || {}}\r\n                                                           series={graphData.series || []}\r\n                                                           type=\"line\"\r\n                                                           height={400}/>}\r\n                    </Paper>\r\n                </Paper>\r\n            </Collapse>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nconst pollutionData = ['co', 'o3', 'pm10', 'pm25', 'so2', 'no2', 'All']","import {useState} from \"react\";\r\nimport {LocationSearch, Graph} from \"../../components\";\r\nimport './index.scss'\r\nimport {Typography} from \"@mui/material\";\r\n\r\nexport default function Dashboard() {\r\n    const [date, setDate] = useState('')\r\n    const [location, setLocation] = useState('')\r\n\r\n    const handleLocationChange = (_: any, value: string) => {\r\n        setLocation(value)\r\n    }\r\n\r\n    const handleDateChange = (e: any) => {\r\n        setDate(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={'dashboard-wrapper'}>\r\n            <Typography variant={'h4'} gutterBottom sx={{mb: 3, fontWeight: 600}} color={'textSecondary'}> Pollution Information</Typography>\r\n            <LocationSearch onDateChange={handleDateChange} onLocationChange={handleLocationChange}/>\r\n            <Graph date={date} location={location}/>\r\n        </div>\r\n    )\r\n}","import {Route, Routes} from \"react-router-dom\";\r\nimport {Dashboard} from \"../pages\";\r\n\r\nexport default function MainRoutes() {\r\n    return (\r\n        <Routes>\r\n            <Route path='/' element={<Dashboard/>}/>\r\n        </Routes>\r\n    )\r\n}","import React from 'react';\nimport MainRoutes from \"./routes\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <BrowserRouter basename={'/pollution-dashboard'}>\n            <MainRoutes/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}